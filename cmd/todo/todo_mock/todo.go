// Code generated by MockGen. DO NOT EDIT.
// Source: todo.pb.go

// Package todo_mock is a generated GoMock package.
package todo_mock

import (
	x "."
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTodoClient is a mock of TodoClient interface
type MockTodoClient struct {
	ctrl     *gomock.Controller
	recorder *MockTodoClientMockRecorder
}

// MockTodoClientMockRecorder is the mock recorder for MockTodoClient
type MockTodoClientMockRecorder struct {
	mock *MockTodoClient
}

// NewMockTodoClient creates a new mock instance
func NewMockTodoClient(ctrl *gomock.Controller) *MockTodoClient {
	mock := &MockTodoClient{ctrl: ctrl}
	mock.recorder = &MockTodoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoClient) EXPECT() *MockTodoClientMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockTodoClient) List(ctx context.Context, in *x.Void, opts ...grpc.CallOption) (*x.TaskList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*x.TaskList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTodoClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoClient)(nil).List), varargs...)
}

// Add mocks base method
func (m *MockTodoClient) Add(ctx context.Context, in *x.Task, opts ...grpc.CallOption) (*x.Void, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*x.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockTodoClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTodoClient)(nil).Add), varargs...)
}

// MockTodoServer is a mock of TodoServer interface
type MockTodoServer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServerMockRecorder
}

// MockTodoServerMockRecorder is the mock recorder for MockTodoServer
type MockTodoServerMockRecorder struct {
	mock *MockTodoServer
}

// NewMockTodoServer creates a new mock instance
func NewMockTodoServer(ctrl *gomock.Controller) *MockTodoServer {
	mock := &MockTodoServer{ctrl: ctrl}
	mock.recorder = &MockTodoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoServer) EXPECT() *MockTodoServerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockTodoServer) List(arg0 context.Context, arg1 *x.Void) (*x.TaskList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*x.TaskList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTodoServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoServer)(nil).List), arg0, arg1)
}

// Add mocks base method
func (m *MockTodoServer) Add(arg0 context.Context, arg1 *x.Task) (*x.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*x.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockTodoServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTodoServer)(nil).Add), arg0, arg1)
}
