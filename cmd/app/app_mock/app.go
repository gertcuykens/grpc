// Code generated by MockGen. DO NOT EDIT.
// Source: app.pb.go

// Package app_mock is a generated GoMock package.
package app_mock

import (
	x "."
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAppClient is a mock of AppClient interface
type MockAppClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppClientMockRecorder
}

// MockAppClientMockRecorder is the mock recorder for MockAppClient
type MockAppClientMockRecorder struct {
	mock *MockAppClient
}

// NewMockAppClient creates a new mock instance
func NewMockAppClient(ctrl *gomock.Controller) *MockAppClient {
	mock := &MockAppClient{ctrl: ctrl}
	mock.recorder = &MockAppClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppClient) EXPECT() *MockAppClientMockRecorder {
	return m.recorder
}

// Test mocks base method
func (m *MockAppClient) Test(ctx context.Context, in *x.Err, opts ...grpc.CallOption) (*x.Err, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Test", varargs...)
	ret0, _ := ret[0].(*x.Err)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Test indicates an expected call of Test
func (mr *MockAppClientMockRecorder) Test(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockAppClient)(nil).Test), varargs...)
}

// MockAppServer is a mock of AppServer interface
type MockAppServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppServerMockRecorder
}

// MockAppServerMockRecorder is the mock recorder for MockAppServer
type MockAppServerMockRecorder struct {
	mock *MockAppServer
}

// NewMockAppServer creates a new mock instance
func NewMockAppServer(ctrl *gomock.Controller) *MockAppServer {
	mock := &MockAppServer{ctrl: ctrl}
	mock.recorder = &MockAppServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppServer) EXPECT() *MockAppServerMockRecorder {
	return m.recorder
}

// Test mocks base method
func (m *MockAppServer) Test(arg0 context.Context, arg1 *x.Err) (*x.Err, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test", arg0, arg1)
	ret0, _ := ret[0].(*x.Err)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Test indicates an expected call of Test
func (mr *MockAppServerMockRecorder) Test(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockAppServer)(nil).Test), arg0, arg1)
}
